/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/service/configure-device": {
    post: operations["configure_device"];
  };
  "/service/connect-device": {
    post: operations["connect_device"];
  };
  "/service/get-device-list": {
    get: operations["get_device_list"];
  };
  "/service/get-device-sensor-info": {
    post: operations["get_device_sensor_info"];
  };
  "/service/get-monitor-conf-list": {
    post: operations["get_monitor_conf_list"];
  };
  "/service/get-sensor-data": {
    post: operations["get_sensor_data"];
  };
  "/service/interrupt-device-init": {
    post: operations["interrupt_device_init"];
  };
  "/service/obtain-device-conf-info": {
    post: operations["obtain_device_conf_info"];
  };
  "/service/save-monitor-conf": {
    post: operations["save_monitor_conf"];
  };
  "/service/start-device-init": {
    post: operations["start_device_init"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ConfigureDeviceRequest: {
      confs: (components["schemas"]["DeviceConfEntry"])[];
      /** Format: int32 */
      device_id: number;
    };
    ConnParam: {
      name: string;
      value: components["schemas"]["ConnParamValType"];
    };
    ConnParamChoiceListInfo: {
      choices: (string)[];
    };
    ConnParamConf: {
      info?: components["schemas"]["ConnParamEntryInfo"] | null;
      name: string;
      typ: components["schemas"]["ConnParamType"];
    };
    ConnParamEntryInfo: {
      ChoiceList: components["schemas"]["ConnParamChoiceListInfo"];
    };
    /** @enum {string} */
    ConnParamType: "Bool" | "Int" | "Float" | "String" | "ChoiceList";
    ConnParamValType: OneOf<[{
      Bool: boolean;
    }, {
      /** Format: int32 */
      Int: number;
    }, {
      /** Format: float */
      Float: number;
    }, {
      String: string;
    }]>;
    ConnectDeviceRequest: {
      connect_conf: (components["schemas"]["ConnParam"])[];
      /** Format: int32 */
      device_id: number;
    };
    DeviceConfEntry: {
      data?: components["schemas"]["DeviceConfType"] | null;
      /** Format: int32 */
      id: number;
    };
    DeviceConfInfoEntry: {
      data: components["schemas"]["DeviceConfInfoEntryType"];
      /** Format: int32 */
      id: number;
      name: string;
    };
    DeviceConfInfoEntryChoiceList: {
      choices: (string)[];
      /** Format: int32 */
      default?: number | null;
      required: boolean;
    };
    DeviceConfInfoEntryFloat: {
      /** Format: float */
      default?: number | null;
      /** Format: float */
      gt?: number | null;
      /** Format: float */
      lt?: number | null;
      /** Format: float */
      neq?: number | null;
      required: boolean;
    };
    DeviceConfInfoEntryFloatRange: {
      /** Format: float */
      def_from?: number | null;
      /** Format: float */
      def_to?: number | null;
      /** Format: float */
      max: number;
      /** Format: float */
      min: number;
      required: boolean;
    };
    DeviceConfInfoEntryInt: {
      /** Format: int32 */
      default?: number | null;
      /** Format: int32 */
      gt?: number | null;
      /** Format: int32 */
      lt?: number | null;
      /** Format: int32 */
      neq?: number | null;
      required: boolean;
    };
    DeviceConfInfoEntryIntRange: {
      /** Format: int32 */
      def_from?: number | null;
      /** Format: int32 */
      def_to?: number | null;
      /** Format: int32 */
      max: number;
      /** Format: int32 */
      min: number;
      required: boolean;
    };
    DeviceConfInfoEntryJSON: {
      default?: string | null;
      required: boolean;
    };
    DeviceConfInfoEntryString: {
      default?: string | null;
      match_regex?: string | null;
      /** Format: int32 */
      max_len?: number | null;
      /** Format: int32 */
      min_len?: number | null;
      required: boolean;
    };
    DeviceConfInfoEntryType: OneOf<[{
      String: components["schemas"]["DeviceConfInfoEntryString"];
    }, {
      Int: components["schemas"]["DeviceConfInfoEntryInt"];
    }, {
      IntRange: components["schemas"]["DeviceConfInfoEntryIntRange"];
    }, {
      Float: components["schemas"]["DeviceConfInfoEntryFloat"];
    }, {
      FloatRange: components["schemas"]["DeviceConfInfoEntryFloatRange"];
    }, {
      JSON: components["schemas"]["DeviceConfInfoEntryJSON"];
    }, {
      ChoiceList: components["schemas"]["DeviceConfInfoEntryChoiceList"];
    }, {
      Section: (components["schemas"]["DeviceConfInfoEntry"])[];
    }]>;
    DeviceConfType: OneOf<[{
      String: string;
    }, {
      /** Format: int32 */
      Int: number;
    }, {
      IntRange: (number)[];
    }, {
      /** Format: float */
      Float: number;
    }, {
      FloatRange: (number)[];
    }, {
      JSON: string;
    }, {
      /** Format: int32 */
      ChoiceList: number;
    }]>;
    DeviceEntry: {
      /** Format: int32 */
      id: number;
      name: string;
    };
    DeviceStartInitRequest: {
      /** Format: byte */
      device_name: string;
      /** Format: binary */
      module_file: string;
    };
    DeviceStartInitResponse: {
      conn_params: (components["schemas"]["ConnParamConf"])[];
      /** Format: int32 */
      device_id: number;
    };
    GetDeviceListResponse: {
      result: (components["schemas"]["DeviceEntry"])[];
    };
    GetDeviceSensorInfoRequest: {
      /** Format: int32 */
      device_id: number;
    };
    GetDeviceSensorInfoResponse: {
      device_sensor_info: (components["schemas"]["SensorInfo"])[];
    };
    GetSensorDataRequest: {
      /** Format: int32 */
      device_id: number;
      fields: (string)[];
      from?: components["schemas"]["SensorData"] | null;
      /** Format: int32 */
      limit?: number | null;
      sensor: string;
      sort: components["schemas"]["Sort"];
    };
    GetSensorDataResponse: {
      result: ({
          [key: string]: components["schemas"]["SensorData"] | undefined;
        })[];
    };
    InterruptDeviceInitRequest: {
      /** Format: int32 */
      device_id: number;
    };
    MonitorConfListEntry: {
      config: components["schemas"]["MonitorTypeConf"];
      /** Format: int32 */
      device_id: number;
      /** Format: int32 */
      id: number;
      sensor: string;
      typ: components["schemas"]["MonitorType"];
    };
    MonitorConfListFilter: {
      /** Format: int32 */
      device_id: number;
    };
    MonitorConfListRequest: {
      filter: components["schemas"]["MonitorConfListFilter"];
    };
    MonitorConfListResponse: {
      result: (components["schemas"]["MonitorConfListEntry"])[];
    };
    MonitorLineConf: {
      /** Format: int32 */
      limit: number;
      x_field: string;
      y_field: string;
    };
    MonitorLogConf: {
      fields: (string)[];
      /** Format: int32 */
      limit: number;
      sort_direction: components["schemas"]["SortDir"];
      sort_field: string;
    };
    /** @enum {string} */
    MonitorType: "Log" | "Line";
    MonitorTypeConf: OneOf<[{
      Log: components["schemas"]["MonitorLogConf"];
    }, {
      Line: components["schemas"]["MonitorLineConf"];
    }]>;
    ObtainDeviceConfInfoRequest: {
      /** Format: int32 */
      device_id: number;
    };
    ObtainDeviceConfInfoResponse: {
      device_conf_info: (components["schemas"]["DeviceConfInfoEntry"])[];
    };
    SaveMonitorConfRequest: {
      config: components["schemas"]["MonitorTypeConf"];
      /** Format: int32 */
      device_id: number;
      sensor: string;
      typ: components["schemas"]["MonitorType"];
    };
    SaveMonitorConfResponse: {
      /** Format: int32 */
      id: number;
    };
    SensorData: OneOf<[{
      /** Format: int32 */
      Int16: number;
    }, {
      /** Format: int32 */
      Int32: number;
    }, {
      /** Format: int64 */
      Int64: number;
    }, {
      /** Format: float */
      Float32: number;
    }, {
      /** Format: double */
      Float64: number;
    }, {
      Timestamp: string;
    }, {
      String: string;
    }, {
      JSON: string;
    }]>;
    SensorDataInfo: {
      name: string;
      typ: components["schemas"]["SensorDataType"];
    };
    /** @enum {string} */
    SensorDataType: "Int16" | "Int32" | "Int64" | "Float32" | "Float64" | "Timestamp" | "String" | "JSON";
    SensorInfo: {
      data: (components["schemas"]["SensorDataInfo"])[];
      name: string;
    };
    Sort: {
      field: string;
      order: components["schemas"]["SortDir"];
    };
    /** @enum {string} */
    SortDir: "ASC" | "DESC";
    TestUploadForm: {
      /** Format: binary */
      file: string;
      /** Format: byte */
      name: string;
    };
    WebError: {
      /** Format: byte */
      code: string;
      msg: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  configure_device: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigureDeviceRequest"];
      };
    };
    responses: {
      /** @description Ok response */
      200: never;
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  connect_device: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConnectDeviceRequest"];
      };
    };
    responses: {
      /** @description Ok response */
      200: never;
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  get_device_list: {
    responses: {
      /** @description Ok response */
      200: {
        content: {
          "application/json": components["schemas"]["GetDeviceListResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  get_device_sensor_info: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetDeviceSensorInfoRequest"];
      };
    };
    responses: {
      /** @description Ok response with device conf info */
      200: {
        content: {
          "application/json": components["schemas"]["GetDeviceSensorInfoResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  get_monitor_conf_list: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonitorConfListRequest"];
      };
    };
    responses: {
      /** @description Ok response */
      200: {
        content: {
          "application/json": components["schemas"]["MonitorConfListResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  get_sensor_data: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetSensorDataRequest"];
      };
    };
    responses: {
      /** @description Ok response */
      200: {
        content: {
          "application/json": components["schemas"]["GetSensorDataResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  interrupt_device_init: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterruptDeviceInitRequest"];
      };
    };
    responses: {
      /** @description Ok response */
      200: never;
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  obtain_device_conf_info: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ObtainDeviceConfInfoRequest"];
      };
    };
    responses: {
      /** @description Ok response with device conf info */
      200: {
        content: {
          "application/json": components["schemas"]["ObtainDeviceConfInfoResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  save_monitor_conf: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SaveMonitorConfRequest"];
      };
    };
    responses: {
      /** @description Ok response */
      200: {
        content: {
          "application/json": components["schemas"]["SaveMonitorConfResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
  start_device_init: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["DeviceStartInitRequest"];
      };
    };
    responses: {
      /** @description Ok response with device id and connection params */
      200: {
        content: {
          "application/json": components["schemas"]["DeviceStartInitResponse"];
        };
      };
      /** @description Server error response */
      500: {
        content: {
          "application/json": components["schemas"]["WebError"];
        };
      };
    };
  };
}
